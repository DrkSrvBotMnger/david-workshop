/profile:
  cog: bot.cogs.user.profile_cog

  callbacks:
    - _open_inventory:
        services:
          - users_service.get_or_create_user_dto
          - profile_service.fetch_profile_vm
          - profile_service.build_profile_file_and_name
        crud:
          - inventory_crud.fetch_user_inventory_ordered
        utils:
          - discord_helpers.resolve_display_name
        ui:
          - user.profile_views.ProfileView
          - user.inventory_views.InventoryView

    - _open_equip_title:
        services:
          - users_service.get_or_create_user_dto
          - profile_service.fetch_profile_vm
          - equip_service.get_title_select_options
          - profile_service.build_profile_file_and_name
        crud:
          - inventory_crud.set_titles_equipped
        ui:
          - user.equip_title_view.EquipTitleView

    - _open_equip_badges:
        services:
          - users_service.get_or_create_user_dto
          - profile_service.fetch_profile_vm
          - equip_service.get_badge_select_options
          - profile_service.build_profile_file_and_name
        crud:
          - inventory_crud.fetch_user_badges_for_equip
          - inventory_crud.set_badges_equipped
        ui:
          - user.equip_badge_view.EquipBadgeView

  services:
    - users_service.get_or_create_user_dto:
        crud:
          - users_crud.get_or_create_user   # <- fixed name
        returns:
          - UserDTO

    - profile_service.fetch_profile_vm:
        services:
          - users_service.get_or_create_user_dto
        crud:
          - inventory_crud.get_equipped_title_name
          - inventory_crud.get_equipped_badge_emojis
        utils:
          - discord_helpers.resolve_display_name
        dto:
          - ProfileVM

    - profile_service.build_profile_file_and_name:
        renderers:
          - renderers.badge_loader.extract_badge_icons
          - renderers.profile_card.generate_profile_card
        utils:
          - emoji.is_custom_emoji (CUSTOM_DISCORD_EMOJI)
          - emoji.emoji_to_codepoint
        returns:
          - (file, display_name)

  ui:
    views:
      - user.profile_views.ProfileView
      - user.inventory_views.InventoryView
      - user.equip_title_view.EquipTitleView
      - user.equip_badge_view.EquipBadgeView


/inventory:
  cog: bot.cogs.user.profile_cog
  
  callbacks:
    - _open_inventory:
        services:
          - users_service.get_or_create_user_dto
          - inventory_service.get_user_publishables_for_preview
          - profile_service.build_profile_file_and_name
        crud:
          - inventory_crud.fetch_user_inventory_ordered 
        utils:
          - discord_helpers.resolve_display_name
        ui:
          - user.inventory_views.InventoryView
          - user.inventory_views.PresetPreviewButton  
          - user.inventory_views.PresetPreviewView   
          - user.inventory_views.PresetSelect 
          - user.profile_views.ProfileView     
  
  services:
    - users_service.get_or_create_user_dto:
        crud:
          - users_crud.get_or_create_user
        returns:
          - UserDTO
  
    - inventory_service.get_user_publishables_for_preview:
        config:
          - constants.PUBLISHABLE_REWARD_TYPES
        crud:
          - inventory_crud.fetch_user_inventory_ordered
        returns:
          - Dict[reward_key, (channel_id, message_id, label)]


/equip_badge:
  cog: bot.cogs.user.profile_cog

  constants:
    - MAX_BADGES (bot.config.constants)

  callbacks:
    - _open_equip_badges:
        services:
          - users_service.get_or_create_user_dto
          - profile_service.fetch_profile_file_and_name?   # if you refresh preview; else drop
          - equip_service.get_badge_select_options
        crud:
          - inventory_crud.fetch_user_badges_for_equip     # if options are built in service, omit here
        ui:
          - user.equip_badge_view.EquipBadgeView

    - (within EquipBadgeView action):
        services: []
        crud:
          - inventory_crud.set_badges_equipped
        ui: []

  services:
    - users_service.get_or_create_user_dto:
        crud:
          - users_crud.get_or_create_user
        returns:
          - UserDTO

    - equip_service.get_badge_select_options:
        services:
          - users_service.get_or_create_user_dto
        crud:
          - inventory_crud.fetch_user_badges_for_equip
        returns:
          - (user_id, List[discord.SelectOption])

    - profile_service.build_profile_file_and_name:   # include only if you re-render the card after equip
        renderers:
          - renderers.badge_loader.extract_badge_icons
          - renderers.profile_card.generate_profile_card
        utils:
          - emoji.is_custom_emoji (CUSTOM_DISCORD_EMOJI)
          - emoji.emoji_to_codepoint
        returns:
          - (file, display_name)

  ui:
    views:
      - user.equip_badge_view.EquipBadgeView


/equip_title:
  cog: bot.cogs.user.profile_cog

  callbacks:
    - _open_equip_title:
        services:
          - users_service.get_or_create_user_dto
          - profile_service.build_profile_file_and_name?   # if you refresh preview; else drop
          - equip_service.get_title_select_options
        crud: []
        ui:
          - user.equip_title_view.EquipTitleView

    - (within EquipTitleView action):
        services: []
        crud:
          - inventory_crud.set_titles_equipped
        ui: []

  services:
    - users_service.get_or_create_user_dto:
        crud:
          - users_crud.get_or_create_user
        returns:
          - UserDTO

    - equip_service.get_title_select_options:
        services:
          - users_service.get_or_create_user_dto
        crud:
          - inventory_crud.fetch_user_titles_for_equip
        returns:
          - (user_id, List[discord.SelectOption])

    - profile_service.build_profile_file_and_name:   # include only if you re-render the card after equip
        renderers:
          - renderers.badge_loader.extract_badge_icons
          - renderers.profile_card.generate_profile_card
        utils:
          - emoji.is_custom_emoji (CUSTOM_DISCORD_EMOJI)
          - emoji.emoji_to_codepoint
        returns:
          - (file, display_name)

  ui:
    views:
      - user.equip_title_view.EquipTitleView


/event:
cog: bot.cogs.user.event_cog

callbacks:
  - view_event (initial render):
      services:
        - events_service.list_user_browseable_events          # returns EventDTO list :contentReference[oaicite:0]{index=0}
      presentation:
        - events_presentation.make_event_options              # EventDTO[] -> EventOptionVM[] :contentReference[oaicite:1]{index=1}
        - events_presentation.event_default_fmt               # label/description policy :contentReference[oaicite:2]{index=2}
      ui:
        - ui.common.selects.GenericSelectView                 # generic picker view :contentReference[oaicite:3]{index=3}
        - ui.user.events_views.make_user_event_select_view    # thin builder for user events :contentReference[oaicite:4]{index=4}

  - on_event_selected (select -> preview):
      services:
        - events_service.get_event_message_refs_dto           # EventMessageRefsDTO :contentReference[oaicite:5]{index=5}
      presentation:
        - events_presentation.make_event_message_vm           # -> EventMessageVM (ids + title + url) :contentReference[oaicite:6]{index=6}
      ui:
        - (cog) fetch original Discord message and EDIT ephemeral in place  # see event_cog implementation :contentReference[oaicite:7]{index=7}
        - ui.user.events_views.UserEventButtons               # “Contact Mods” + Back button :contentReference[oaicite:8]{index=8}

services:
  - events_service.find_events_dto:
      crud:
        - events_crud.search_events                           # uses EventFilter, ordering, limit/offset :contentReference[oaicite:9]{index=9}
      postfilter:
        - tag CSV any/all filtering (temporary)               # service-level filter :contentReference[oaicite:10]{index=10}
      returns:
        - List[EventDTO]

  - events_service.get_event_dto_by_key:
      crud:
        - events_crud.get_event_by_key                        # ORM lookup by event_key :contentReference[oaicite:11]{index=11}
      returns:
        - EventDTO | None

  - events_service.get_event_message_refs_dto:
      crud:
        - events_crud.get_event_message_refs_by_key           # projection NamedTuple with embed ids :contentReference[oaicite:12]{index=12}
      returns:
        - EventMessageRefsDTO

ui:
  views:
    - ui.common.selects.GenericSelectView                     # reusable select view :contentReference[oaicite:13]{index=13}
    - ui.user.events_views.make_user_event_select_view        # builds select for EventOptionVMs :contentReference[oaicite:14]{index=14}
    - ui.user.events_views.UserEventButtons                   # buttons (Back + link) :contentReference[oaicite:15]{index=15}



    /report_action:
    intent: "User reports a self-reportable action for an event."
    entrypoint:
      cog: bot/cogs/user/event_cog.py::UserEventCog.report_action
    ui:
      - bot/ui/common/selects.py::GenericSelectView
      - bot/ui/common/selects.py::build_select_options_from_vms
      - bot/ui/user/report_action_views.py::make_event_select_view
      - bot/ui/user/report_action_views.py::make_action_select_view
      - bot/ui/user/report_action_views.py::ReportActionModal
    presentation:
      - bot/presentation/user_actions_presentation.py::get_event_pick_vms
      - bot/presentation/user_actions_presentation.py::get_event_and_action_vms
      - bot/presentation/user_actions_presentation.py::submit_report_action_presentation
      - bot/presentation/user_actions_presentation.py::EventPickVM
      - bot/presentation/user_actions_presentation.py::ActionOptionVM
    services:
      - bot/services/action_events_service.py::list_user_doable_action_events
      - bot/services/user_actions_service.py::submit_user_action
      - bot/services/events_service.py::list_user_reporting_events
      - bot/services/events_service.py::get_event_dto_by_key
      - bot/services/events_service.py::get_status_name
      - bot/services/events_service.py::get_event_is_open_for_action
      - bot/services/rewards_service.py::get_reward_dto_by_reward_event_id
      - bot/services/rewards_service.py::bump_reward_granted_counter
      - bot/services/users_service.py::get_or_create_user_dto
    crud:
      - bot/crud/action_events_crud.py::list_self_reportable_action_events_for_event
      - bot/crud/action_events_crud.py::user_already_completed_non_repeatable
      - bot/crud/action_events_crud.py::get_action_event_bundle
      - bot/crud/user_actions_crud.py::insert_user_action
      - bot/crud/user_event_data_crud.py::get_or_create_user_event_data
      - bot/crud/user_event_data_crud.py::add_points_to_user_event_data
      - bot/crud/users_crud.py::add_points_to_user
      - bot/crud/rewards_crud.py::get_reward_by_reward_event_id
      - bot/crud/rewards_crud.py::increment_reward_number_granted
      - bot/crud/inventory_crud.py::add_or_increment_inventory
      - bot/crud/events_crud.py::get_event_by_key
      - bot/crud/events_crud.py::list_user_reporting_events
    domain:
      dto:
        - bot/domain/dto.py::ActionEventDTO
        - bot/domain/dto.py::UserActionCreateDTO
        - bot/domain/dto.py::ActionReportResultDTO
        - bot/domain/dto.py::RewardGrantDTO
      mapping:
        - bot/domain/mapping.py::to_action_event_dto
        - bot/domain/mapping.py::reward_to_grant_dto
    utils:
      - bot/utils/parsing.py::parse_required_fields
      - bot/utils/parsing.py::parse_help_texts
      - bot/ui/common/selects.py
    flow:
      - step: open
        action: user runs /report_action
        result:
          - if no events: ephemeral "No events available"
          - else: send Event select view (GenericSelectView)
      - step: pick_event
        action: user selects event_key
        presenter: get_event_and_action_vms(member, event_key)
        result:
          - if no actions: rebuild event picker or plain message
          - else: swap same-ephemeral to Action select view
      - step: pick_action
        action: user selects action_event_id
        branching:
          - if ActionOptionVM.input_fields is empty: submit immediately
          - else: open ReportActionModal with dynamic fields
      - step: submit
        action: presentation builds UserActionCreateDTO and calls submit_user_action
        result:
          - on error: ephemeral error text
          - on success: new ephemeral with points/reward + submitted values